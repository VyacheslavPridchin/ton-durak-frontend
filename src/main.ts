// main.ts
import './assets/main.css'
import { createApp, h, watch } from 'vue'
import App from './App.vue'
import router from './router'
import apiService from '@/services/ApiService.ts'
import { TonConnectUIPlugin, useTonConnectModal, useTonConnectUI } from '@townsquarelabs/ui-vue'
import connector from '@/services/tonconnect.js'

console.log('üèÅ main.ts start')

const app = createApp({})

app.use(router)
app.use(TonConnectUIPlugin, { connector })
console.log('üöÄ Plugins applied')

const Root = {
    setup() {
        console.log('üîß Root.setup() start')

        const { state, open, close } = useTonConnectModal()
        console.log('üó≥Ô∏è useTonConnectModal obtained')

        const { tonConnectUI } = useTonConnectUI()
        console.log('‚öôÔ∏è useTonConnectUI obtained')

        // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ—à–µ–ª—å–∫–∏ (—Ç–æ–ª—å–∫–æ MyTonWallet)
        tonConnectUI.setOptions({
            walletsList: ['mytonwallet'],
        })
        console.log('üí° Wallet filter applied')

        // –ï—Å–ª–∏ –º–æ–¥–∞–ª–∫–∞ –∑–∞–∫—Ä—ã–ª–∞—Å—å –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –æ—Ç–∫—Ä–æ–µ–º –µ—ë —Å–Ω–æ–≤–∞
        watch(
            () => state.value.status,
            async (status) => {
                console.log('üéØ Modal status changed ‚Üí', status)
                if (status === 'closed' && !connector.connected) {
                    console.log('üîÑ Modal closed but not connected ‚Üí reopening')
                    await open()
                }
            }
        )

        // –ö–æ–≥–¥–∞ —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ –º–µ–Ω—è–µ—Ç—Å—è (—É—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ) ‚Äî –º–æ–Ω—Ç–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        connector.onStatusChange(async (status) => {
            console.log('üì∂ onStatusChange:', status)
            const proofItem = status.connectItems.tonProof
            const proof = 'proof' in proofItem ? proofItem.proof : ''
            console.log('üîê Extracted proof:', proof)

            const payload = {
                tonProof: proof,
                public_key: status.account.publicKey,
                state_init: status.account.walletStateInit,
                wallet_address: status.account.address,
            }
            console.log('üì§ Sending auth payload:', payload)

            try {
                const authResp = await apiService.authTonkeeper(payload)
                console.log('‚úÖ authTonkeeper response:', authResp)
                window.onBoardingRequired = authResp.data.user_data.first_time
                console.log('üéâ Mounting app now')
                app.mount('#app')
            } catch (err) {
                console.error('‚ùå Auth failed, reopening modal:', err)
                await open()
            }
        })

        // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É
        ;(async () => {
            console.log('‚è≥ Restoring connection‚Ä¶')
            await connector.restoreConnection()
            console.log('üîÑ connector.connected =', connector.connected)

            if (connector.connected) {
                console.log('üîî Already connected ‚Üí mounting')
                app.mount('#app')
            } else {
                console.log('üîî Not connected ‚Üí opening modal')
                await open()
            }
        })()

        console.log('üîß Root.setup() end')
        return () => h(App)
    },
}

app.component('Root', Root)
console.log('üìù Root component registered')
// –ó–∞–º–µ—Ç—å—Ç–µ: app.mount('#app') –±–æ–ª—å—à–µ –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∑–¥–µ—Å—å ‚Äî —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ onStatusChange –∏–ª–∏ –ø–æ—Å–ª–µ restoreConnection.
